generator client {
  provider = "prisma-client-js"
    output   = "./src/generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String     @id @default(cuid())
  name                   String?
  email                  String?    @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime   @default(now()) @map("created_at")
  updatedAt              DateTime   @default(now()) @map("updated_at")
  stripeCustomerId       String?    @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?    @unique @map("stripe_subscription_id")
  stripePriceId          String?    @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?  @map("stripe_current_period_end")
  accounts               Account[]
  sessions               Session[]
  Notebook               Notebook[]
  CustomDomain Domain? @relation("CustomDomain")

  @@map("users")
}

model Domain {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  ownerId String @unique
  owner   User   @relation("CustomDomain",fields: [ownerId], references: [id])

  @@index([ownerId])
  @@map("domains")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notebook {
  id          String   @id @default(cuid())
  title       String
  description String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  authorId    String
  pages       Page[]
  author      User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
  @@map("notebooks")
}

model Page {
  id         String   @id @default(cuid())
  title      String
  content    Json?
  published  Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  notebookId String
  notebook   Notebook @relation(fields: [notebookId], references: [id])

  @@index([notebookId])
  @@map("pages")
}
