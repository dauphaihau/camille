generator client {
  provider = "prisma-client-js"
  // output   = "./src/generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String?  @db.Text
  expires      DateTime

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")
  stripeCustomerId String?   @unique @map("stripe_customer_id")

  accounts           Account[]
  sessions           Session[]
  userOnWorkspace    UserOnWorkspace[]               @relation("UserOnWorkspace")
  userOnTeamspace    UserOnTeamspace[]               @relation("UserOnTeamspace")
  trackingUserAccess TrackingUserAccessOnWorkspace[] @relation("TrackingUser")
  favorites          Favorite[]
  notebooks          Notebook[]
  PagesCreated       Page[]                          @relation("PageCreatedBy")
  PagesUpdated       Page[]                          @relation("PageUpdatedBy")
  PagesDeleted       Page[]                          @relation("PageDeletedBy")

  lastAccessWorkspaceId String?
  // lastAccessWorkspaceId String?   @map("last_access_workspace_id")
  // lastAccessWorkspace   Workspace? @relation("trackUserAccessWorkspace", fields: [lastAccessWorkspaceId], references: [id])

  // pagesUserUpdated Page? @relation("updatedByUser")
  // pagesUserDeleted Page? @relation("deletedByUser")

  @@index([lastAccessWorkspaceId])
  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TrackingUserAccessOnWorkspace {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now()) @map("created_at")
  lastAccessNotebookId String?
  lastAccessPageId     String?

  userId      String
  user        User      @relation("TrackingUser", fields: [userId], references: [id])
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  //  lastAccessWorkspaceId String?
  //  workspace             Workspace? @relation(fields: [lastAccessWorkspaceId], references: [id])

  // recentlyAccessPages Page[]

  // Teamspace Teamspace[]

  @@index([userId])
  @@index([workspaceId])
  // @@index([lastAccessWorkspaceId])
  @@map("tracking_user_access_on_workspace")
}

model Workspace {
  id                     String    @id @default(cuid())
  name                   String
  domain                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeWorkspaceId      String?   @unique @map("stripe_workspace_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @default(now()) @updatedAt @map("updated_at")

  createdBy                     String
  trackingUserAccessOnWorkspace TrackingUserAccessOnWorkspace?
  userOnWorkspace               UserOnWorkspace[]              @relation("WorkspaceOnUser")
  teamspaces                    Teamspace[]
  notebooks                     Notebook[]
  favorites                     Favorite[]

  @@map("workspaces")
}

model Teamspace {
  id         String    @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
  isOrigin   Boolean?  @default(false)
  archivedAt DateTime? @map("archived_at")

  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  createdBy       String
  userOnTeamspace UserOnTeamspace[] @relation("TeamspaceOnUser")
  notebooks       Notebook[]

  @@index([workspaceId])
  @@map("teamspace")
}

model Notebook {
  id          String   @id @default(cuid())
  title       String
  description String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  pages       Page[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  teamspaceId String?
  teamspace   Teamspace? @relation(fields: [teamspaceId], references: [id])

  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
  @@index([workspaceId])
  @@index([teamspaceId])
  @@map("notebooks")
}

model Page {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  published Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  notebookId String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy     String
  createdByUser User    @relation("PageCreatedBy", fields: [createdBy], references: [id])
  deletedBy     String?
  deletedByUser User?   @relation("PageDeletedBy", fields: [deletedBy], references: [id])
  updatedBy     String
  updatedByUser User    @relation("PageUpdatedBy", fields: [updatedBy], references: [id])
  favorites Favorite[]

  @@index([notebookId])
  @@index([deletedBy])
  @@index([updatedBy])
  @@index([createdBy])
  @@map("pages")
}

model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspaceId String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  pageId String
  page   Page?  @relation(fields: [pageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([pageId])
  @@index([workspaceId])
  @@map("favorites")
}

model UserOnWorkspace {
  id        String   @id @default(cuid())
  role      Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  userId      String
  user        User      @relation("UserOnWorkspace", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String
  workspace   Workspace @relation("WorkspaceOnUser", fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([workspaceId])
  @@index([userId])
  @@map("user_on_workspace")
}

model UserOnTeamspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  operation Int      @default(0)

  userId      String
  user        User      @relation("UserOnTeamspace", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamspaceId String
  teamspace   Teamspace @relation("TeamspaceOnUser", fields: [teamspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([teamspaceId])
  @@index([userId])
  @@map("user_on_teamspace")
}
