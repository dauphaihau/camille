generator client {
  provider = "prisma-client-js"
  output = "./src/generated/client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                     String               @id @default(cuid())
  name                   String?
  email                  String?              @unique
  emailVerified          DateTime?
  image                  String?
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @default(now()) @map("updated_at")
  stripeCustomerId       String?              @unique @map("stripe_customer_id")
  accounts               Account[]
  sessions               Session[]
  workspaces             Workspace[]
  trackingUserAccess     TrackingUserAccess[]

  lastAccessWorkspaceId String?    @unique @map("last_access_workspace_id")
  lastAccessWorkspace   Workspace? @relation("trackUserAccessWorkspace", fields: [lastAccessWorkspaceId], references: [id])

  pagesUserUpdated Page? @relation("updatedByUser")
  pagesUserDeleted Page? @relation("deletedByUser")

  @@index([lastAccessWorkspaceId])
  @@map("users")
}

model TrackingUserAccess {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  lastAccessWorkspaceId String?
  workspace             Workspace? @relation(fields: [lastAccessWorkspaceId], references: [id])

  lastAccessNotebookId String?
  lastAccessPageId     String?

  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([lastAccessWorkspaceId])
  @@map("tracking_user_access")
}

model Workspace {
  id                     String    @id @default(cuid())
  name                   String
  domain                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeWorkspaceId      String?   @unique @map("stripe_workspace_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")

  createdBy String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  trackUserAccessWorkspace User? @relation("trackUserAccessWorkspace")

  users              User[]
  notebooks          Notebook[]
  trackingUserAccess TrackingUserAccess[]

  @@map("workspaces")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notebook {
  id          String   @id @default(cuid())
  title       String
  description String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  pages       Page[]

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@map("notebooks")
}

model Page {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  updatedBy     String?  @unique
  updatedAt     DateTime @default(now()) @map("updated_at")
  updatedByUser User?    @relation("updatedByUser", fields: [updatedBy], references: [email])

  deletedBy     String?   @unique
  deletedAt     DateTime? @map("deleted_at")
  deletedByUser User?     @relation("deletedByUser", fields: [deletedBy], references: [email])

  notebookId String
  notebook   Notebook @relation(fields: [notebookId], references: [id])

  @@index([notebookId])
  @@index([updatedBy])
  @@index([deletedBy])
  @@map("pages")
}
